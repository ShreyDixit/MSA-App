name: Build Executables

on:
  push:
    branches:
      - master

jobs:
  build_linux:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10' # Replace '3.x' with your Python version

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH=$HOME/.local/bin:$PATH

      - name: Install project dependencies with Poetry
        run: |
          poetry install --no-root

      - name: Build Linux executable
        run: |
          poetry run pyinstaller msa_app/main.py --onefile --name msa_app_linux
          mkdir -p ./artifacts
          mv ./dist/msa_app_linux ./artifacts/msa_app_linux
          
      - name: Archive Linux executable
        uses: actions/upload-artifact@v2
        with:
          name: linux-artifact
          path: ./artifacts

  build_mac:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10' # Replace '3.x' with your Python version

      - name: Install poetry
        uses: abatilo/actions-poetry@v2

      - name: Install project dependencies with Poetry
        run: |
          poetry install --no-root

      - name: Build macOS executable
        run: |
          poetry run pyinstaller msa_app/main.py --onefile --name msa_app_mac
          # Additional flags or configurations for macOS as needed

      - name: Archive macOS executable
        uses: actions/upload-artifact@v2
        with:
          name: mac-artifact
          path: ./dist/msa_app_mac

  build_windows:
    runs-on: windows-2019

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10' # Replace '3.x' with your Python version

      - name: Install poetry
        uses: abatilo/actions-poetry@v2
        
      - name: Install build tools
        run: |
          choco install visualstudio2019buildtools --package-parameters "--allWorkloads --includeRecommended --includeOptional" -y
          choco install python3 --params "/InstallDir:C:\Python" -y
          Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
          
      - name: Set up MSVC for Python
        run: |
          pip install --upgrade setuptools
          pip install --upgrade wheel
          pip install --upgrade pip
          pip install msvc-runtime
          
      - name: Install project dependencies with Poetry
        run: |
          poetry install --no-root

      - name: Build Windows executable
        run: |
          poetry run pyinstaller msa_app/main.py --onefile --name msa_app_windows.exe
          mkdir -p ./artifacts
          mv ./dist/msa_app_windows.exe ./artifacts/msa_app_windows.exe

      - name: Archive Windows executable
        uses: actions/upload-artifact@v2
        with:
          name: windows-artifact
          path: ./artifacts

  create_release:
    needs: [build_linux, build_mac, build_windows]

    runs-on: ubuntu-20.04

    steps:
      - name: Download Linux artifact
        uses: actions/download-artifact@v2
        with:
          name: linux-artifact
          path: ./linux-artifact

      - name: Download macOS artifact
        uses: actions/download-artifact@v2
        with:
          name: mac-artifact
          path: ./mac-artifact

      - name: Download Windows artifact
        uses: actions/download-artifact@v2
        with:
          name: windows-artifact
          path: ./windows-artifact

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: release-${{ github.run_id }}-${{ github.sha }}
          release_name: Release ${{ github.run_id }}
          draft: false
          prerelease: false

      - name: Upload Linux artifact as asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./linux-artifact/msa_app_linux
          asset_name: msa_app_linux
          asset_content_type: application/octet-stream

      - name: Upload macOS artifact as asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./mac-artifact/msa_app_mac
          asset_name: msa_app_mac
          asset_content_type: application/octet-stream

      - name: Upload Windows artifact as asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./windows-artifact/msa_app_windows.exe
          asset_name: msa_app_windows.exe
          asset_content_type: application/octet-stream
