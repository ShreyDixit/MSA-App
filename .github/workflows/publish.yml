name: Build Executables

on:
  push:
    branches:
      - master

jobs:
  build_linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10' # Replace '3.x' with your Python version

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH=$HOME/.local/bin:$PATH

      - name: Install project dependencies with Poetry
        run: |
          poetry install --no-root

      - name: Build Linux executable
        run: |
          poetry run pyinstaller msa_app/main.py --onefile --name msa_app_linux
          # Additional flags or configurations for Linux as needed

      - name: Create Linux release
        id: create_linux_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.sha }}-linux
          release_name: Release ${{ github.sha }} (Linux)
          draft: false
          prerelease: false

      - name: Upload Linux executable as asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_linux_release.outputs.upload_url }}
          asset_path: ./dist/msa_app_linux
          asset_name: msa_app_linux
          asset_content_type: application/octet-stream

  build_mac:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10' # Replace '3.x' with your Python version

      - name: Install poetry
        uses: abatilo/actions-poetry@v2

      - name: Install project dependencies with Poetry
        run: |
          poetry install --no-root

      - name: Build macOS executable
        run: |
          poetry run pyinstaller msa_app/main.py --onefile --name msa_app_mac
          # Additional flags or configurations for macOS as needed

      - name: Create macOS release
        id: create_mac_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.sha }}-mac
          release_name: Release ${{ github.sha }} (macOS)
          draft: false
          prerelease: false

      - name: Upload macOS executable as asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_mac_release.outputs.upload_url }}
          asset_path: ./dist/msa_app_mac
          asset_name: msa_app_mac
          asset_content_type: application/octet-stream

  build_windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10' # Replace '3.x' with your Python version

      - name: Install poetry
        uses: abatilo/actions-poetry@v2
        
      - name: Install build tools
        run: |
          choco install visualstudio2019buildtools --package-parameters "--allWorkloads --includeRecommended --includeOptional" -y
          choco install python3 --params "/InstallDir:C:\Python" -y
          refreshenv
          
      - name: Install project dependencies with Poetry
        run: |
          poetry install --no-root

      - name: Build Windows executable
        run: |
          poetry run pyinstaller msa_app/main.py --onefile --name msa_app_windows.exe
          # Additional flags or configurations for Windows as needed

      - name: Create Windows release
        id: create_windows_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.sha }}-windows
          release_name: Release ${{ github.sha }} (Windows)
          draft: false
          prerelease: false

      - name: Upload Windows executable as asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_windows_release.outputs.upload_url }}
          asset_path: ./dist/msa_app_windows.exe
          asset_name: msa_app_windows.exe
          asset_content_type: application/octet-stream
